// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/todo.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoClient is the client API for Todo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoClient interface {
	Add(ctx context.Context, in *AddToDoRequest, opts ...grpc.CallOption) (*AddToDoResponse, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Todo_ListClient, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResultBoolResponse, error)
	Done(ctx context.Context, in *DoneToDoRequest, opts ...grpc.CallOption) (*ResultBoolResponse, error)
}

type todoClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoClient(cc grpc.ClientConnInterface) TodoClient {
	return &todoClient{cc}
}

func (c *todoClient) Add(ctx context.Context, in *AddToDoRequest, opts ...grpc.CallOption) (*AddToDoResponse, error) {
	out := new(AddToDoResponse)
	err := c.cc.Invoke(ctx, "/api.todo/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Todo_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Todo_ServiceDesc.Streams[0], "/api.todo/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Todo_ListClient interface {
	Recv() (*ToDoItem, error)
	grpc.ClientStream
}

type todoListClient struct {
	grpc.ClientStream
}

func (x *todoListClient) Recv() (*ToDoItem, error) {
	m := new(ToDoItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResultBoolResponse, error) {
	out := new(ResultBoolResponse)
	err := c.cc.Invoke(ctx, "/api.todo/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) Done(ctx context.Context, in *DoneToDoRequest, opts ...grpc.CallOption) (*ResultBoolResponse, error) {
	out := new(ResultBoolResponse)
	err := c.cc.Invoke(ctx, "/api.todo/Done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServer is the server API for Todo service.
// All implementations must embed UnimplementedTodoServer
// for forward compatibility
type TodoServer interface {
	Add(context.Context, *AddToDoRequest) (*AddToDoResponse, error)
	List(*EmptyMessage, Todo_ListServer) error
	Delete(context.Context, *IdRequest) (*ResultBoolResponse, error)
	Done(context.Context, *DoneToDoRequest) (*ResultBoolResponse, error)
	mustEmbedUnimplementedTodoServer()
}

// UnimplementedTodoServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServer struct {
}

func (UnimplementedTodoServer) Add(context.Context, *AddToDoRequest) (*AddToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTodoServer) List(*EmptyMessage, Todo_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTodoServer) Delete(context.Context, *IdRequest) (*ResultBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTodoServer) Done(context.Context, *DoneToDoRequest) (*ResultBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Done not implemented")
}
func (UnimplementedTodoServer) mustEmbedUnimplementedTodoServer() {}

// UnsafeTodoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServer will
// result in compilation errors.
type UnsafeTodoServer interface {
	mustEmbedUnimplementedTodoServer()
}

func RegisterTodoServer(s grpc.ServiceRegistrar, srv TodoServer) {
	s.RegisterService(&Todo_ServiceDesc, srv)
}

func _Todo_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.todo/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).Add(ctx, req.(*AddToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServer).List(m, &todoListServer{stream})
}

type Todo_ListServer interface {
	Send(*ToDoItem) error
	grpc.ServerStream
}

type todoListServer struct {
	grpc.ServerStream
}

func (x *todoListServer) Send(m *ToDoItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Todo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.todo/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.todo/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).Done(ctx, req.(*DoneToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Todo_ServiceDesc is the grpc.ServiceDesc for Todo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Todo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.todo",
	HandlerType: (*TodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Todo_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Todo_Delete_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _Todo_Done_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Todo_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/todo.proto",
}
